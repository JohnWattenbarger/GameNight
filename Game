# Last update:
#   - changed enemy row and columns sizes to allow for different numbers to be used
#
# Next update:
#   - test victoryAnimation() where Claude moves, then the cape and whiskey come
#   - add a displayMessage() function
#   - add a victory screen
#       > add stats (score, accuracy, time, whiskey drunk, etc.
#   - add a defeat screen
#   - add different levels
#   - add a menu

import pygame, sys
from pygame.locals import *
import random

# center the window
import os
os.environ['SDL_VIDEO_CENTERED'] = '1'

pygame.init()

# Set up screen
WIDTH = 800
HEIGHT = 700
screen = pygame.display.set_mode((WIDTH, HEIGHT))
backgroundColor = (100, 220, 230)
backgroundColor = (0, 20, 25)

# set icon
iconWidth = 32
iconHeight = 32
iconImage = pygame.image.load('images/claude.png')
iconImage = pygame.transform.scale(iconImage, (iconWidth, iconHeight))
pygame.display.set_icon(iconImage)

# set window name
gameName = 'Claude'
pygame.display.set_caption(gameName)


    # add background image
backgroundImage = pygame.image.load('images/background2.jpg')
backgroundImage = pygame.transform.scale(backgroundImage, (WIDTH, HEIGHT))

# Setup player
playerWidth = 100
playerHeight = 100

playerX = WIDTH//2
playerY = HEIGHT - 1.5*playerHeight

playerColor = (245, 50, 50)
playerSpeed = 8

playerImage = pygame.image.load('images/claude.png')

# Setup enemies
enemyColumns = 8
enemyRows = 3
enemyMoveDistance = 50

    # determine max height and width
maxRowHeight = HEIGHT*3//5 - enemyMoveDistance
maxColumnWidth = WIDTH - enemyMoveDistance

minGapSize = 5
minWidth = 5
minHeight = 5
maxColumns = maxColumnWidth // (minWidth + minGapSize)
maxRows = maxRowHeight // (minHeight + minGapSize)

# reset enemyColumns and enemyRows if they are too big/small
if enemyRows <= 0:
    enemyRows = 1
if enemyRows > maxRows:
    enemyRows = maxRows
if enemyColumns <= 0:
    enemyRows = 1
if enemyColumns > maxColumns:
    enemyColumns = maxColumns

# determine max allowed height and width
enemyWidth = maxColumnWidth // (enemyColumns*2 - 1)
enemyHeight = maxRowHeight // (enemyRows*2 - 1)
enemyGapWidth = enemyWidth
enemyGapHeight = enemyHeight

if enemyWidth < enemyHeight:
    # enemyGapHeight = enemyGapHeight + (enemyHeight - enemyWidth)
    enemyGapHeight = enemyGapWidth

    enemyHeight = enemyWidth
else:
    enemyGapWidth = enemyGapWidth + (enemyWidth - enemyHeight)
    # enemyGapWidth = enemyGapHeight

    enemyWidth = enemyHeight

    # setup actual height and width
# if maxColumnWidth < maxRowHeight:
#     enemyWidth = maxColumnWidth // (enemyColumns*2 - enemyColumns)
#     enemyGapWidth = enemyWidth
#
#     enemyHeight = enemyWidth
#     enemyGapHeight = maxRowHeight // enemyRows - enemyHeight
# else:
#     enemyHeight = maxRowHeight // enemyRows // 2
#     enemyGapHeight = enemyHeight
#
#     enemyWidth = enemyHeight
#     enemyGapWidth = maxColumnWidth // enemyColumns - enemyWidth

# test
# print('******* width ********')
# print('WIDTH: ' + str(WIDTH))
# print('enemyColumns: ' + str(enemyColumns))
# print('maxColumns: ' + str(maxColumns))
# print('enemyMoveDistance: ' + str(enemyMoveDistance))
# print('maxColumnWidth: ' + str(maxColumnWidth))
# print('enemyWidth: ' + str(enemyWidth))
# print('enemyGapWidth: ' + str(enemyGapWidth))
# print()
#
# print('******* height ********')
# print('HEIGHT: ' + str(HEIGHT))
# print('enemyRows: ' + str(enemyRows))
# print('maxRows: ' + str(maxRows))
# print('enemyMoveDistance: ' + str(enemyMoveDistance))
# print('maxRowHeight: ' + str(maxRowHeight))
# print('enemyHeight: ' + str(enemyHeight))
# print('enemyGapHeight: ' + str(enemyGapHeight))
# print()



# enemyWidth = WIDTH / (enemyColumns) / 2
# enemyHeight = 40

enemySpeed = 5
enemyColor = (50, 250, 50)

enemyGap = enemyWidth

enemyImage = pygame.image.load('images/volleyball.png')

    # create list of enemies
enemies = []

# create a list of bullets
bulletWidth = 5
bulletHeight = 10
bulletColor = (255, 255, 255)
bulletSpeed = 10

enemyBulletColor = (140, 255, 20)

playerBullets = []
enemyBullets = []

# keep track of player shot delay
currentShootAgainDelay = 0
shootAgainResetValue = 15
shootAgainResetDefaultValue = shootAgainResetValue

# create powerUps
powerUpWidth = 40
powerUpHeight = 40
powerUpColor = (230, 230, 200)
powerUpSpeed = 8

powerUpTimeRemaining = 0
powerUpResetValue = 80

# 1 / chanceToShoot  is the % likelihood that each enemy will shoot per frame
chanceToShoot = 200
chanceToDropPowerUp = 5

powerUpImage = pygame.image.load('images/whiskey.png')

powerUps = []

# add sound
powerUpSound = pygame.mixer.Sound('sounds/powerup.ogg')
# pygame.mixer.music.load('sounds/background.ogg')
# pygame.mixer.music.load('sounds/goToTown.mp3')
pygame.mixer.music.load('sounds/moo.mp3')
    # play forever
pygame.mixer.music.play(-1, 0.0)

# other images
capeImage = pygame.image.load('images/cape.png')
whiskeyImage = pygame.image.load('images/whiskey.png')

# keep track of time passing
time = 0

# create an enemy object to keep track of different attributes
class Component():
    def __init__(self, x, y, width, height, speed, color):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.speed = speed
        self.color = color

        self.points = []

        # self.rect = (x, y, width, height)

        # used to rotate in a circle
        self.startingX = x
        self.startingY = y

        self.moveDistance = enemyMoveDistance
        self.nextPoint = 0

        self.setupRotatingPoints()

    def moveTowards(self, newX, newY):
        xDifference = abs(self.x - newX)
        yDifference = abs(self.y - newY)

        if self.x < newX:
            if xDifference < self.speed:
                self.x += 1
            else:
                self.x += self.speed
        elif self.x > newX:
            if xDifference < self.speed:
                self.x -= 1
            else:
                self.x -= self.speed

        if self.y < newY:
            if yDifference < self.speed:
                self.y += 1
            else:
                self.y += self.speed
        elif self.y > newY:
            if yDifference < self.speed:
                self.y -= 1
            else:
                self.y -= self.speed

    def setupRotatingPoints(self):
        self.points.append((self.startingX, self.startingY))
        self.points.append((self.startingX, self.startingY + self.moveDistance))
        self.points.append((self.startingX + self.moveDistance, self.startingY + self.moveDistance))
        self.points.append((self.startingX + self.moveDistance, self.startingY))

    def moveToNextPoint(self):
        # update next point
        if self.x == self.points[self.nextPoint][0] and self.y == self.points[self.nextPoint][1]:
            if self.nextPoint < len(self.points)-1:
                self.nextPoint += 1
            else:
                self.nextPoint = 0

        # move towards next point
        self.moveTowards(self.points[self.nextPoint][0], self.points[self.nextPoint][1])
    
    def getCenter(self):
        centerX = self.x + (self.width//2)
        centerY = self.y + (self.height // 2)
        return (centerX, centerY)
        
    def shoot(self, direction, list):
        x = self.getCenter()[0]
        y = self.getCenter()[1]
        
        if direction == 'up':
            speed = bulletSpeed * -1
        if direction == 'down':
            speed = bulletSpeed
        
        list.append(Component(x, y, bulletWidth, bulletHeight, speed, bulletColor))

    def dropPowerUp(self):
        x = self.getCenter()[0]
        y = self.getCenter()[1]

        powerUps.append(Component(x, y, powerUpWidth, powerUpHeight, powerUpSpeed, powerUpColor))
        powerUps[-1].setImage(powerUpImage)

    def moveBullet(self):
        self.y += self.speed

    def draw(self):
        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))

    def getRect(self):
        return pygame.Rect(self.x, self.y, self.width, self.height)

    def setImage(self, image):
        self.image = pygame.transform.scale(image, (self.width, self.height))

    def drawImage(self):
        screen.blit(self.image, self.getRect())

    def changeToSize(self, newWidth, newHeight, growSpeed):
        widthDifference = abs(self.width - newWidth)
        heightDifference = abs(self.height - newHeight)

        if widthDifference > 0:
            if widthDifference < growSpeed:
                widthGrowSpeed = 1
            else:
                widthGrowSpeed = growSpeed
            if self.width > newWidth:
                widthGrowSpeed *= -1
            self.width += widthGrowSpeed

        if heightDifference > 0:
            if heightDifference < growSpeed:
                heightGrowSpeed = 1
            else:
                heightGrowSpeed = growSpeed
            if self.height > newHeight:
                heightGrowSpeed *= -1
            self.height += heightGrowSpeed


def victoryAnimation():
    # make sure player is normal sized
    player.width = playerWidth
    player.height = playerHeight
    player.setImage(playerImage)

    growScale = 3
    whiskeyGrowScale = 2
    growSpeed = 3

    newPlayerWidth = player.width*growScale
    newPlayerHeight = player.height*growScale

    newX = WIDTH//2 - newPlayerWidth//2
    newY = HEIGHT//2 - newPlayerHeight//2
    newPlayerSpeed = 6

    # create a cape
    capeX = WIDTH-130
    capeY = 0
    # capeX = WIDTH//2 + abs(player.x - WIDTH//2)
    # capeY = HEIGHT//2 - abs(player.y - HEIGHT//2)
    capeWidth = playerWidth
    capeHeight = playerHeight
    capeSpeed = newPlayerSpeed
    capeColor = (255, 0, 0)
    cape = Component(capeX, capeY, capeWidth, capeHeight, capeSpeed, capeColor)
    cape.setImage(capeImage)

    newCapeWidth = cape.width*growScale
    newCapeHeight = cape.height*growScale

    # create a whiskey bottle
    whiskeyX = 25
    whiskeyY = 0
    whiskeyWidth = powerUpWidth
    whiskeyHeight = powerUpHeight
    whiskeySpeed = 5
    whiskeyColor = (0,0,0)
    whiskey = Component(whiskeyX, whiskeyY, whiskeyWidth, whiskeyHeight, whiskeySpeed, whiskeyColor)
    whiskey.setImage(whiskeyImage)

    newWhiskeyWidth = whiskey.width*whiskeyGrowScale
    newWhiskeyHeight = whiskey.height*whiskeyGrowScale

    newWhiskeyX = newX - 13*whiskeyGrowScale
    newWhiskeyY = newY+whiskeyGrowScale

    # temporarily change speed for animation
    player.speed = newPlayerSpeed

    # test
    while (player.x != newX or player.y != newY):
        screen.fill(backgroundColor)
        screen.blit(backgroundImage, (0, 0, WIDTH, HEIGHT))

        if player.width != newPlayerWidth or player.height != newPlayerHeight:
            player.changeToSize(newPlayerWidth, newPlayerHeight, growSpeed)
            player.setImage(playerImage)

        player.moveTowards(newX, newY)
        player.drawImage()

        pygame.display.update()

    while (cape.x != newX or cape.y != newY) or (whiskey.x != newWhiskeyX or whiskey.y != newWhiskeyY):
        screen.fill(backgroundColor)
        screen.blit(backgroundImage, (0, 0, WIDTH, HEIGHT))

        if cape.width != newCapeWidth or cape.height != newCapeHeight:
            cape.changeToSize(newCapeWidth, newCapeHeight, growSpeed)
            cape.setImage(capeImage)

        if whiskey.width != newWhiskeyWidth or whiskey.height != newWhiskeyHeight:
            whiskey.changeToSize(newWhiskeyWidth, newWhiskeyHeight, growSpeed)
            whiskey.setImage(whiskeyImage)

        cape.moveTowards(newX, newY)
        cape.drawImage()

        player.drawImage()

        whiskey.moveTowards(newX - 13 * whiskeyGrowScale, newY + whiskeyGrowScale)
        whiskey.drawImage()

        pygame.display.update()



    # move player to center of screen
    # while (player.x != newX or player.y != newY) or (cape.x != newX or cape.y != newY):
    #     screen.fill(backgroundColor)
    #     screen.blit(backgroundImage, (0, 0, WIDTH, HEIGHT))
    #
    #     # grow images
    #     if cape.width != newCapeWidth or cape.height != newCapeHeight:
    #         cape.changeToSize(newCapeWidth, newCapeHeight, growSpeed)
    #         cape.setImage(capeImage)
    #
    #     if whiskey.width != newWhiskeyWidth or whiskey.height != newWhiskeyHeight:
    #         whiskey.changeToSize(newWhiskeyWidth, newWhiskeyHeight, growSpeed)
    #         whiskey.setImage(whiskeyImage)
    #
    #     if player.width != newPlayerWidth or player.height != newPlayerHeight:
    #         player.changeToSize(newPlayerWidth, newPlayerHeight, growSpeed)
    #         player.setImage(playerImage)
    #
    #     # move/draw images
    #     if player.x < WIDTH // 2:
    #         cape.moveTowards(newX, newY)
    #     else:
    #         cape.moveTowards(player.x, player.y)
    #     cape.drawImage()
    #
    #     player.moveTowards(newX, newY)
    #     player.drawImage()
    #
    #     whiskey.moveTowards(newX - 13*whiskeyGrowScale, newY+whiskeyGrowScale)
    #     whiskey.drawImage()
    #
    #     pygame.display.update()

    # change speed back
    player.speed = playerSpeed

# create enemies list
for col in range(0, enemyColumns):
    for row in range(0, enemyRows):
        # enemies.append(Component(col*enemyWidth + col*enemyGap + enemyWidth, row*enemyHeight + row*enemyGap + enemyHeight, enemyWidth, enemyHeight, enemySpeed, enemyColor))

        enemyX = col * enemyWidth + col * enemyGapWidth
        enemyY = row * enemyHeight + row * enemyGapHeight

        enemies.append(Component(enemyX, enemyY, int(enemyWidth), int(enemyHeight), enemySpeed, enemyColor))

# set enemy image
for e in enemies:
    e.setImage(enemyImage)

# key presses
keyLeft = False
keyRight = False
keySpace = False

# clock
clock = pygame.time.Clock()

# create player
player = Component(playerX, playerY, playerWidth, playerHeight, playerSpeed, playerColor)
player.setImage(playerImage)

gameOver = False
levelComplete = False


while not gameOver:
    if not levelComplete:
        for event in pygame.event.get():
            # test
            # print(event)

            if event.type == pygame.QUIT:
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    sys.exit()
                if event.key == pygame.K_LEFT:
                    keyLeft = True
                if  event.key == pygame.K_RIGHT:
                    keyRight = True
                if event.key == pygame.K_SPACE and currentShootAgainDelay == 0:
                    keySpace = True

            elif event.type == pygame.KEYUP:
                if event.key == pygame.K_LEFT:
                    keyLeft = False
                if  event.key == pygame.K_RIGHT:
                    keyRight = False
                if event.key == pygame.K_SPACE:
                    keySpace = False

        #update player position
        if keyLeft and player.x > 0:
            player.x -= player.speed
        if keyRight and player.x < WIDTH - playerWidth:
            player.x += player.speed

        # update player shooting
        if keySpace and currentShootAgainDelay == 0:
            player.shoot('up', playerBullets)
            currentShootAgainDelay = shootAgainResetValue

        # look for bullet collisions
        playerRect = player.getRect()
        for b in enemyBullets:
            if b.getRect().colliderect(playerRect):
                gameOver = True

        for b in playerBullets:
            for e in enemies:
                # if there is a collision
                if b.getRect().colliderect(e.getRect()):
                    # determine if an enemy will drop a powerUp
                    randomNumber = random.randrange(chanceToDropPowerUp)
                    if randomNumber == 0:
                        e.dropPowerUp()
                    # remove bullet and enemy
                    if playerBullets.__contains__(b):
                        playerBullets.remove(b)
                    enemies.remove(e)

                    # test
                    # enemies = []

        # look for powerUp collisions
            # already got playerRect above
        for p in powerUps:
            if p.getRect().colliderect(playerRect):
                powerUpTimeRemaining = powerUpResetValue
                powerUps.remove(p)
                powerUpSound.play()

        # add powerUpEffect
        if powerUpTimeRemaining > 0:
            player.height = playerHeight//2
            player.width = playerWidth//2
            player.setImage(playerImage)

            player.speed = powerUpSpeed
            shootAgainResetValue = 6
        else:
            player.height = playerHeight
            player.width = playerWidth
            player.setImage(playerImage)

            player.speed = playerSpeed
            shootAgainResetValue = shootAgainResetDefaultValue

        # decrement powerUpTimeRemaining
        if powerUpTimeRemaining > 0:
            powerUpTimeRemaining -= 1

    # draw graphics

        # screen background
        screen.fill(backgroundColor)
        screen.blit(backgroundImage, (0, 0, WIDTH, HEIGHT))

        # draw bullets
        for b in enemyBullets:
            # test
            b.color = enemyBulletColor
            b.moveBullet()
            b.draw()
        for b in playerBullets:
            b.moveBullet()
            b.draw()

        # draw powerUps
        for p in powerUps:
            p.moveBullet()
            p.drawImage()

        # draw player
        player.drawImage()

        # draw enemies
        for e in enemies:
            e.moveToNextPoint()
            # draw enemies
            e.drawImage()

            # determine if an enemy will shoot
            randomNumber = random.randrange(chanceToShoot)
            if randomNumber == 0:
                e.shoot('down', enemyBullets)

        pygame.display.update()

        # wait
        clock.tick(30)

        # used for score
        time += 1

        # test
        # print(str(time) + '    ' + str(len(enemies)))

        # used for shooting delay
        if currentShootAgainDelay > 0:
            currentShootAgainDelay -= 1

        # end game if no enemies left
        if len(enemies) == 0:
            levelComplete = True

    if levelComplete:
        victoryAnimation()
        gameOver = True

# After the game ends
pygame.mixer.music.fadeout(2000)


while gameOver:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                sys.exit()

def randomColor():
    return (random.randrange(255), random.randrange(255), random.randrange(255))