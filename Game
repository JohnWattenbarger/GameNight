import pygame, sys
from pygame.locals import *
import random

# center the window
import os
os.environ['SDL_VIDEO_CENTERED'] = '1'

pygame.init()

# Set up screen
WIDTH = 800
HEIGHT = 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
backgroundColor = (100, 220, 230)
backgroundColor = (0, 20, 25)

# Setup player
playerWidth = 50
playerHeight = 50

playerX = WIDTH//2
playerY = HEIGHT - 1.5*playerHeight

playerColor = (245, 50, 50)
playerSpeed = 8

# Setup enemies
enemyColumns = 8
enemyRows = 3

enemyWidth = WIDTH / (enemyColumns) / 2
enemyHeight = 40

enemySpeed = 5
enemyColor = (50, 250, 50)

enemyGap = enemyWidth

    # create list of enemies
enemies = []

# create a list of bullets
bulletWidth = 5
bulletHeight = 10
bulletColor = (255, 255, 255)
bulletSpeed = 10

bullets = []

# keep track of time passing
time = 0

# create an enemy object to keep track of different attributes
class Component():
    def __init__(self, x, y, width, height, speed, color):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.speed = speed
        self.color = color

        self.points = []

        # self.rect = (x, y, width, height)

        # used to rotate in a circle
        self.startingX = x
        self.startingY = y

        self.moveDistance = 50
        self.nextPoint = 0

        self.setupRotatingPoints()

    def moveTowards(self, newX, newY):
        if self.x < newX:
            self.x += self.speed
        elif self.x > newX:
            self.x -= self.speed

        if self.y < newY:
            self.y += self.speed
        elif self.y > newY:
            self.y -= self.speed

    def setupRotatingPoints(self):
        self.points.append((self.startingX, self.startingY))
        self.points.append((self.startingX, self.startingY + self.moveDistance))
        self.points.append((self.startingX + self.moveDistance, self.startingY + self.moveDistance))
        self.points.append((self.startingX + self.moveDistance, self.startingY))

    def moveToNextPoint(self):
        # update next point
        if self.x == self.points[self.nextPoint][0] and self.y == self.points[self.nextPoint][1]:
            if self.nextPoint < len(self.points)-1:
                self.nextPoint += 1
            else:
                self.nextPoint = 0

        # move towards next point
        self.moveTowards(self.points[self.nextPoint][0], self.points[self.nextPoint][1])

        # if time < 200:
        #     self.moveTowards(self.points[self.nextPoint][0], self.points[self.nextPoint][1])
        # else:
        #     self.moveTowards(playerX, playerY)
    
    def getCenter(self):
        centerX = self.x + (self.width//2)
        centerY = self.y + (self.height // 2)
        return (centerX, centerY)
        
    def shoot(self, direction):
        x = self.getCenter()[0]
        y = self.getCenter()[1]
        
        if direction == 'up':
            speed = bulletSpeed * -1
        
        bullets.append(Component(x, y, bulletWidth, bulletHeight, speed, bulletColor))

    def moveBullet(self):
        self.y += self.speed

    def draw(self):
        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))
        


for col in range(0, enemyColumns):
    for row in range(0, enemyRows):
        # enemies.append(Component(col*enemyWidth + col*enemyGap + enemyWidth, row*enemyHeight + row*enemyGap + enemyHeight, enemyWidth, enemyHeight, enemySpeed, enemyColor))

        enemyX = col * enemyWidth + col * enemyGap
        enemyY = row * enemyHeight + row * enemyGap

        enemies.append(Component(enemyX, enemyY, enemyWidth, enemyHeight, enemySpeed, enemyColor))

# key presses
keyLeft = False
keyRight = False

# clock
clock = pygame.time.Clock()

# create player
player = Component(playerX, playerY, playerWidth, playerHeight, playerSpeed, playerColor)

gameOver = False

while not gameOver:
    for event in pygame.event.get():
        # test
        # print(event)

        if event.type == pygame.QUIT:
            sys.exit()
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                sys.exit()
            if event.key == pygame.K_LEFT:
                keyLeft = True
            if  event.key == pygame.K_RIGHT:
                keyRight = True
            if event.key == pygame.K_SPACE:
                player.shoot('up')

        elif event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT:
                keyLeft = False
            if  event.key == pygame.K_RIGHT:
                keyRight = False

    #update player position
    if keyLeft and playerX > 0:
        player.x -= player.speed
    if keyRight and playerX < WIDTH - playerWidth:
        player.x += player.speed

    screen.fill(backgroundColor)

    # draw bullets
    for b in bullets:
        b.moveBullet()
        b.draw()

    # draw player
    pygame.draw.rect(screen, player.color, (player.x, player.y, player.width, player.height))

    # draw enemies
    for e in enemies:
        e.moveToNextPoint()
        pygame.draw.rect(screen, e.color, (e.x, e.y, e.width, e.height))


    pygame.display.update()

    # wait
    clock.tick(30)

    # used for score
    time += 1
    print(time)


def randomColor():
    return (random.randrange(255), random.randrange(255), random.randrange(255))